// Generated by scripts/generate_command_definition.py

#include "cdk.command.h"

template <> class BDL::CustomCommand::CommandParameterProxy<Use> {
  Use value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Use>(); }
  static constexpr auto parser    = &CommandRegistry::fake_parse;
  static constexpr auto type      = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Use";

  operator Use() const noexcept { return value; }
};

template <> class BDL::CustomCommand::CommandParameterProxy<Reload> {
  Reload value;

public:
  static auto fetch_tid() { return type_id<CommandRegistry, Reload>(); }
  static constexpr auto parser    = &CommandRegistry::fake_parse;
  static constexpr auto type      = CommandParameterDataType::NORMAL;
  static constexpr auto enum_name = "Reload";

  operator Reload() const noexcept { return value; }
};

struct CdkCommand_0 : Command {
  CommandParameterProxy<Use> cmd;
  CommandParameterProxy<std::string> cdk;
  virtual void execute(CommandOrigin const &origin, CommandOutput &output) override {
    CdkCommand context{origin, output};
    context.usecmd(cmd, cdk);
  }
};

struct CdkCommand_1 : Command {
  CommandParameterProxy<Reload> cmd;
  virtual void execute(CommandOrigin const &origin, CommandOutput &output) override {
    CdkCommand context{origin, output};
    context.reload(cmd);
  }
};

void register_commands() {
  auto &instance = CustomCommandRegistry::getInstance();
  {
    auto &item = instance.registerEnum<Use>();
    item.addValue("use", Use::use);
  }
  {
    auto &item = instance.registerEnum<Reload>();
    item.addValue("reload", Reload::reload);
  }
  {
    auto &cmd = instance.registerCommand<CdkCommand>();
    {
      auto &ovl = cmd.registerOverload<CdkCommand_0>();
      ovl.addParameter<Use>("cmd", false, offsetof(CdkCommand_0, cmd));
      ovl.addParameter<std::string>("cdk", false, offsetof(CdkCommand_0, cdk));
    }
    {
      auto &ovl = cmd.registerOverload<CdkCommand_1>();
      ovl.addParameter<Reload>("cmd", false, offsetof(CdkCommand_1, cmd));
    }
  }
}
